@page "/app/change-password"
@using Openbook.Data.Modules;
@inject IUser user
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject NotificationService NotificationService
<PageTitle>Change-Password | Advince Books</PageTitle>

<div class="content container-fluid">

    <!-- Page Header -->
    <div class="page-header">
        <div class="content-page-header ">
            <h5>Change Password</h5>
        </div>
    </div>
    <!-- /Page Header -->
    <!-- Table -->



	<div class="row">
		<div class="col-md-12">
			<EditForm Model="model" OnValidSubmit="Save">
				<DataAnnotationsValidator />
				<div class="card-body">
					<div class="card">
						<div class="form-group-item">
							<div class="row">
								<div class="col-lg-12 col-md-6 col-sm-12">
									<div class="form-group">
										<label class="form-control-label">Current Password</label>
										<input class="form-control" type="password" @bind="model.CurrentPassword">
										<ValidationMessage For="@(() => model.CurrentPassword)" />
									</div>
									<div class="form-group">
										<label class="form-control-label">New Password</label>
										<input class="form-control" type="password" @bind="model.NewPassword">
										<ValidationMessage For="@(() => model.NewPassword)" />
									</div>
									<div class="form-group">
										<label class="form-control-label">Confirm NewPassword</label>
										<input class="form-control" type="password" @bind="model.ConfirmNewPassword">
										<ValidationMessage For="@(() => model.ConfirmNewPassword)" />
									</div>
								</div>
								<div class="form-group mb-0">
									<button class="btn btn-primary" type="submit">Change Password</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			</EditForm>
		</div>
	</div>
</div>
@code{
	ChangePasswordModel model = new ChangePasswordModel();
	protected override void OnInitialized()
	{
		LoadData();
	}
	private async void LoadData()
	{
		model.NewPassword = string.Empty;
		model.CurrentPassword = string.Empty;
		model.ConfirmNewPassword = string.Empty;
		StateHasChanged();
    }
	public async Task Save()
	{
		        var message = await user.ChangePassword(model);
		if (message.Description== "Changed")
		        {
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "Successfully changed password.", Duration = 3000 });
		}
		        else
		         {
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = message.Description, Duration = 3000 });
		          }
	}
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
