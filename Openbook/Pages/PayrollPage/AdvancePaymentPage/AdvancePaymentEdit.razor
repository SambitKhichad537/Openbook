@page "/app/advancepayment/edit/{id}"
@inject IAdvancePayment _advancePayment
@inject IEmployee _emploee
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigation
@inject NotificationService NotificationService
<PageTitle>AdvancePayment | Edit | Advince Books</PageTitle>
<div class="content container-fluid">
    <div class="page-header">
        <div class="content-page-header ">
            <h5>Edit AdvancePayment</h5>
            <div class="list-btn">
                <ul class="filter-list">
                    <li>
                        <a class="btn btn-primary" href="/app/advancepayment/add"><i class="fa fa-plus-circle me-2" aria-hidden="true"></i>Add</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <div class=" card-table">
                <div class="card-body">
                    <div class="card">
                        <EditForm Model="model" OnValidSubmit="Save">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-lg-6 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label>Voucher No</label>
                                        <input type="text" class="form-control" @bind="model.VoucherNo" readonly>
                                        <ValidationMessage For="@(() => model.VoucherNo)" />
                                    </div>
                                </div>
                                <div class="col-lg-6 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label>Date</label>
                                        <RadzenDatePicker @bind-Value=@model.Date DateFormat="d" Class="w-100" />
                                        <ValidationMessage For="@(() => model.Date)" />
                                    </div>
                                </div>
                                <div class="col-lg-6 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label>Employee</label>
                                        <RadzenDropDown Style="width:100%;" @bind-Value="@model.EmployeeId" Placeholder="Choose Employee" AllowFiltering="true" Data="@(listEmployee)" TextProperty="EmployeeName" ValueProperty="EmployeeId" />
                                        <ValidationMessage For="@(() => model.EmployeeId)" />
                                    </div>
                                </div>
                                <div class="col-lg-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label>Amount</label>
                                        <input type="number" class="form-control"  @bind="model.Amount">
                                        <ValidationMessage For="@(() => model.Amount)" />
                                    </div>
                                </div>
                                <hr />
                                <div class="col-lg-6 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label>Salary Month</label>
                                        <RadzenDatePicker @bind-Value=@model.SalaryMonth DateFormat="MMMMyyyy" Class="w-100" Change="()=>ChangeDate()" />
                                        <ValidationMessage For="@(() => model.SalaryMonth)" />
                                    </div>
                                </div>
                                <div class="col-lg-6 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label>Narration</label>
                                        <input type="text" class="form-control" @bind="model.Narration">

                                        <ValidationMessage For="@(() => model.Narration)" />
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <button type="submit" class="btn btn-primary">Save</button>
                                    <a href="/app/advancepayment" class="btn btn-primary cancel me-2">Cancel</a>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string id { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    AdvancePayment model = new AdvancePayment();
    //IList<AccountLedgerView> listCashBank;
    IList<EmployeeView> listEmployee;
    InvoiceSetting setting = new InvoiceSetting();
    string monthYear;
    int decAdvancePaymentVouchertypeId = 13;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        model = await _advancePayment.GetbyId(Convert.ToInt32(id));
        //listCashBank = await _ledger.GetCashOrBank();
        listEmployee = await _emploee.GetAll();
        StateHasChanged();
    }
    private async Task ChangeDate()
    {
        string strMonth = model.SalaryMonth.ToString("MMMMyyyy");
        string Month = strMonth.Substring(0, 3);
        string strmonthYear = Convert.ToDateTime(strMonth.ToString()).Year.ToString();
        monthYear = Month + " " + strmonthYear;
        model.YearMonth = monthYear;
        StateHasChanged();
    }
    private async Task Save()
    {
        model.VoucherTypeId = decAdvancePaymentVouchertypeId;
        model.InvoiceNo = string.Empty;
        model.FinancialYearId = 1;
        model.ModifyDate = DateTime.UtcNow;
        bool result = await _advancePayment.Update(model);

        if (result == true)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "Updated Successfully.", Duration = 3000 });
            _navigation.NavigateTo("/app/advancepayment");
            StateHasChanged();
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error , Summary = "", Detail = "Invalid.", Duration = 3000 });
            StateHasChanged();
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
