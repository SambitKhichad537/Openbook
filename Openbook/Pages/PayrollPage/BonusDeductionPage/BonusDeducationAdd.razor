@page "/app/bonusdeduction/add"
@inject IBonusDeduction _bonudDeduction
@inject IEmployee _emploee
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigation
@inject NotificationService NotificationService
<PageTitle>Bonus / Deduction | Add | Advince Book</PageTitle>
<div class="content container-fluid">
    <div class="page-header">
        <div class="content-page-header ">
            <h5>Add Bonus / Deduction</h5>
            <div class="list-btn">

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <div class=" card-table">
                <div class="card-body">
                    <div class="card">
                        <EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
							<div class="row">
					<div class="col-lg-6 col-sm-6 col-12">
									<div class="form-group">
										<label>Date</label>
							<RadzenDatePicker @bind-Value=@model.Date DateFormat="d" Class="w-100" />
							<ValidationMessage For="@(() => model.Date)" />
									</div>
								</div>
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Employee</label>
							<RadzenDropDown Style="width:100%;" @bind-Value="@model.EmployeeId" Placeholder="Choose Employee" AllowFiltering="true" Data="@(listEmployee)" TextProperty="EmployeeName" ValueProperty="EmployeeId" />
							<ValidationMessage For="@(() => model.EmployeeId)" />
						</div>
					</div>
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Month</label>
							<RadzenDatePicker @bind-Value=@model.Month DateFormat="MMMMyyyy" Class="w-100" Change="()=>ChangeDate()" />
							<ValidationMessage For="@(() => model.Month)" />
						</div>
					</div>
					<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
							<label>Bonus Amount</label>
										<input type="number" class="form-control" @bind="model.BonusAmount" >
							<ValidationMessage For="@(() => model.BonusAmount)" />
									</div>
								</div>
					<div class="col-lg-4 col-sm-6 col-12">
						<div class="form-group">
							<label>Deduction Amount</label>
							<input type="number" class="form-control" @bind="model.DeductionAmount">
							<ValidationMessage For="@(() => model.DeductionAmount)" />
						</div>
					</div>
					
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Narration</label>
							<input type="text" class="form-control" @bind="model.Narration">
							<ValidationMessage For="@(() => model.Narration)" />
						</div>
					</div>
								<div class="col-lg-12">
									<button type="submit" class="btn btn-primary">Save</button>
									<a href="/app/bonusdeduction" class="btn btn-primary cancel me-2">Cancel</a>
								</div>
								
							</div>
							</EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	BonusDeduction model = new BonusDeduction();
	IList<EmployeeView> listEmployee;
	string monthYear;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        
		listEmployee = await _emploee.GetAll();
		model.EmployeeId = 0;
		model.Date = DateTime.UtcNow;
		model.BonusAmount = 0;
		model.DeductionAmount = 0;
		model.Narration = string.Empty;
		model.Month = DateTime.UtcNow;
		string strMonth = model.Month.ToString("MMMMyyyy");
		string Month = strMonth.Substring(0, 3);
		string strmonthYear = Convert.ToDateTime(strMonth.ToString()).Year.ToString();
		monthYear = Month + " " + strmonthYear;
		model.YearMonth = monthYear;
		StateHasChanged();
    }
    private async Task ChangeDate()
    {
        string strMonth = model.Month.ToString("MMMMyyyy");
		string Month = strMonth.Substring(0, 3);
		string strmonthYear = Convert.ToDateTime(strMonth.ToString()).Year.ToString();
		monthYear = Month + " " + strmonthYear;
		model.YearMonth = monthYear;
		StateHasChanged();
    }
    private async Task Save()
    {
        var isCheck = await _bonudDeduction.CheckName(model.YearMonth, model.EmployeeId);
        if (isCheck == true)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "Already payment this month.", Duration = 3000 });
        }
        else
        {
            model.AddedDate = DateTime.UtcNow;
            var result = await _bonudDeduction.Save(model);

            if (result > 0)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "Save Successfully.", Duration = 3000 });
                StateHasChanged();
				_navigation.NavigateTo("/app/bonusdeduction");
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "Invalid.", Duration = 3000 });
                StateHasChanged();
            }
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
