@page "/app/payhead"
@inject IPayHead _payhead
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigation
@inject NotificationService NotificationService
<PageTitle>Payhead | Openbook</PageTitle>
<div class="content container-fluid">

    <!-- Page Header -->
    <div class="page-header">
        <div class="content-page-header ">
            <h5>Payhead</h5>
            <div class="list-btn">
                <ul class="filter-list">
                    <li>
                        <a class="btn btn-primary" style="cursor:pointer" data-bs-toggle="modal" @onclick="()=>Show()" data-bs-target="#@showModel"><i class="fa fa-plus-circle me-2" aria-hidden="true"></i>Add</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <!-- /Page Header -->
    <!-- Table -->
    <div class="row">
        <div class="col-sm-12">
            <div class=" card-table">
                <div class="card-body">
                    <div class="table-responsive">
                        <RadzenDataGrid AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                        Data="@listModel" TItem="PayHeadView" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn TItem="PayHeadView" Property="PayHeadName" Title="Name" Frozen="true" />
                                <RadzenDataGridColumn TItem="PayHeadView" Property="Type" Title="Type" Frozen="true" />
                                <RadzenDataGridColumn TItem="PayHeadView" Title="Action" Frozen="true" Sortable="false" Filterable="false" Width="100px">
                                    <Template Context="data">
                                        <a class="btn-action-icon me-2" style="cursor:pointer;" data-bs-toggle="modal" @onclick="() =>Edit(data.PayHeadId)" data-bs-target="#@showModel">
                                            <i class="fe fe-edit"></i>
                                        </a>
                                        <a class=" btn-action-icon" style="cursor:pointer;" @onclick="() =>Delete(data.PayHeadId)">
                                            <i class="fe fe-trash-2"></i>
                                        </a>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /Table -->

</div>



<!-- Add Payhead Modal -->

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header border-0 pb-0">
                <div class="form-header modal-header-title text-start mb-0">
                    <h4 class="mb-0">@ShowDialogue</h4>
                </div>
                <button type="button" class="close" @onclick="()=>Close()">
                    <span class="align-center" aria-hidden="true">&times;</span>
                </button>
            </div>
            <hr />
            <EditForm Model="model" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card-body">
                                <div class="form-group-item border-0 pb-0 mb-0">
                                    <div class="row">
                                        <div class="col-lg-12 col-sm-12">
                                            <div class="form-group">
                                                <label>Name <span class="text-danger">*</span></label>
                                                <input type="text" class="form-control" @bind="model.PayHeadName">
                                                <ValidationMessage For="@(() => model.PayHeadName)" />
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-sm-12">
                                            <div class="form-group">
                                                <label>Type <span class="text-danger"></span></label>
                                                <select class="form-select" @bind="model.Type">
                                                    <option value="Addition">Addition</option>
                                                    <option value="Deduction">Deduction</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-sm-12">
                                            <div class="form-group">
                                                <label>Narration <span class="text-danger"></span></label>
                                                <input type="text" class="form-control" @bind="model.Narration">
                                                <ValidationMessage For="@(() => model.Narration)" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" disabled=@IsTaskRunning>Save</button> &nbsp;
                    <a style="cursor:pointer;" @onclick="()=>Close()" class="btn btn-light">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    bool IsTaskRunning = false;
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    string showModel = "add_category";
    string ShowDialogue;
    PayHead model = new PayHead();
    IList<PayHeadView> listModel;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        listModel = await _payhead.GetAll();
        StateHasChanged();
    }
    private async Task Show()
    {
        model.PayHeadId = 0;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowDialogue = "Payhead / Add";
        model.PayHeadId = 0;
        model.PayHeadName = string.Empty;
        model.Type = "Addition";
        model.Narration = string.Empty;
        IsTaskRunning = false;
        StateHasChanged();
    }
    private async Task Edit(int id)
    {
        model.PayHeadId = 0;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowDialogue = "Payhead / Edit";
        model = await _payhead.GetbyId(Convert.ToInt32(id));
        IsTaskRunning = false;
        StateHasChanged();
    }
    private async Task Save()
    {
        IsTaskRunning = true;
        if (model.PayHeadId == 0)
        {
            var isCheck = await _payhead.CheckName(model.PayHeadName);
            if (isCheck == true)
            {
                IsTaskRunning = false;
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "Category name already exists.", Duration = 3000 });
            }
            else
            {
                var result = await _payhead.Save(model);

                if (result > 0)
                {
                    ModalDisplay = "none";
                    ModalClass = "";
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "The payhead has been added.", Duration = 3000 });
                    await LoadData();
                    StateHasChanged();
                }
                else
                {
                    IsTaskRunning = false;
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Invalid.", Duration = 3000 });
                    _navigation.NavigateTo("/", true);
                    StateHasChanged();
                }
            }
        }
        else
        {
            var isCheck = await _payhead.CheckNameId(model.PayHeadName);
            if (isCheck == model.PayHeadId || isCheck == 0)
            {
                bool result = false;
                result = await _payhead.Update(model);

                if (result == true)
                {
                    ModalDisplay = "none";
                    ModalClass = "";
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "Payhead information has been saved.", Duration = 3000 });
                    await LoadData();
                    StateHasChanged();
                }
                else
                {
                    IsTaskRunning = false;
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Invalid.", Duration = 3000 });
                    _navigation.NavigateTo("/", true);
                    StateHasChanged();
                }
            }
            else
            {
                IsTaskRunning = false;
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "Payhead name already exists.", Duration = 3000 });
            }
        }
    }
    private async Task Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        StateHasChanged();
    }
    private async Task Delete(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var result = await _payhead.Delete(id);
            if (result == true)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "The payhead has been deleted..", Duration = 3000 });
                await LoadData();
                StateHasChanged();
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "This payhead cannot be deleted as it is associated either with some transactions or documents.", Duration = 3000 });
                StateHasChanged();
            }
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}