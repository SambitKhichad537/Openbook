@page "/app/chartofaccount"
@inject IChartofAccount _chartofaccount
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigation
@inject NotificationService NotificationService



<PageTitle>ChartOfAccount | Advince Books</PageTitle>



<div class="content container-fluid">

    <!-- Page Header -->
    <div class="page-header">
        <div class="content-page-header">
            <h5>Accounts</h5>
            <div class="list-btn">
                <ul class="filter-list">
                    <li>
                        <div class="short-filter">
                            <img class="me-2" src="assets/img/icons/sort.svg" alt="Sort by select">
                            <div class="sort-by">
                                <select class="sort" @bind="strGroup" @onclick="()=>Filtter()">
                                    <option value="All">All</option>
                                    <option value="Assets">Assets</option>
                                    <option value="Liabilities">Liabilities</option>
                                    <option value="Expenses">Expenses</option>
                                    <option value="Income">Income</option>
                                </select>
                            </div>
                        </div>
                    </li>
                    <li>
                        <a class="btn btn-primary" href="/app/chartofaccount/add"><i class="fa fa-plus-circle me-2" aria-hidden="true"></i>New Account</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <!-- /Page Header -->
    <!-- Table -->
    <div class="row">
        <div class="col-sm-12">
            <div class=" card-table">
                <div class="card-body">
                    <div class="card">
                        <table class="table table-stripped">
                            <thead class="thead-light">
                                <tr>
                                    <th>Code</th>
                                    <th>Account Name</th>
                                    <th>Account Type</th>
                                    <th>Group</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (listModel == null)
                                {

                                }
                                else
                                {
                                    @foreach (var item in listModel)
                                    {
                                        <tr>
                                            <td>@item.LedgerCode</td>
                                            <td><span style="font-weight:900;">@item.LedgerName</span></td>
                                            <td>@item.LedgerName</td>
                                            <td>@item.Type</td>
                                            <td>
                                                
                                            </td>
                                        </tr>
                                        @foreach (var items in listGroup)
                                        {


                                            @if (item.LedgerId == items.GroupUnder)
                                            {
                                                <tr>
                                                    <td>@items.LedgerCode</td>
                                                    <td><span style="font-weight:700;">&nbsp;&nbsp;&nbsp;&nbsp;@items.LedgerName</span></td>
                                                    <td>@items.LedgerName</td>
                                                    <td></td>
                                                    <td>
                                                        
                                                    </td>
                                                </tr>
                                                @foreach (var itemss in listGroup)
                                                {
                                                    @if (items.LedgerId == itemss.GroupUnder)
                                                    {
                                                        <tr>
                                                            <td>@itemss.LedgerCode</td>
                                                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;@itemss.LedgerName</td>
                                                            <td>@itemss.LedgerName</td>
                                                            <td></td>
                                                            <td>
                                                                <a class="btn-action-icon btn-action-icon" style="float:left" href="/app/chartofaccount/edit/@itemss.LedgerId">
                                                                    <i class="fe fe-edit"></i>
                                                                </a>
                                                                <a class="btn-action-icon" style="float:left" @onclick="() =>DeleteGroup(itemss.LedgerId)">
                                                                    <i class="fe fe-trash-2"></i>
                                                                </a>
                                                            </td>
                                                        </tr>
                                                        @foreach (var itemsss in listGroup)
                                                        {
                                                            @if (itemss.LedgerId == itemsss.GroupUnder)
                                                            {
                                                                <tr>
                                                                    <td>@itemsss.LedgerCode</td>
                                                                    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;@itemsss.LedgerName</td>
                                                                    <td>@itemsss.LedgerName</td>
                                                                    <td></td>
                                                                    <td>
                                                                        <a class="btn-action-icon me-2" style="float:left" href="/app/chartofaccount/edit/@itemsss.LedgerId">
                                                                            <i class="fe fe-edit"></i>
                                                                        </a>
                                                                        <a class="btn-action-icon" style="float:left" @onclick="() =>DeleteGroup(itemsss.LedgerId)">
                                                                            <i class="fe fe-trash-2"></i>
                                                                        </a>
                                                                    </td>
                                                                </tr>
                                                                @foreach (var itemssss in listGroup)
                                                                {
                                                                    @if (itemsss.LedgerId == itemssss.GroupUnder)
                                                                    {
                                                                        <tr>
                                                                            <td>@itemssss.LedgerCode</td>
                                                                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@itemssss.LedgerName</td>
                                                                            <td>@itemssss.LedgerName</td>
                                                                            <td></td>
                                                                            <td>
                                                                                <a class="btn-action-icon me-2" style="float:left" href="/app/chartofaccount/edit/@itemssss.LedgerId">
                                                                                    <i class="fe fe-edit"></i>
                                                                                </a>
                                                                                <a class="btn-action-icon" style="float:left" @onclick="() =>DeleteGroup(itemssss.LedgerId)">
                                                                                    <i class="fe fe-trash-2"></i>
                                                                                </a>
                                                                            </td>
                                                                        </tr>
                                                                        @foreach (var itemsssss in listGroup)
                                                                {
                                                                    @if (itemssss.LedgerId == itemsssss.GroupUnder)
                                                                            {
                                                                                
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /Table -->

</div>


@*<RadzenDropDown @bind-Value=value AllowClear="true" AllowFiltering="true"
                Data=@groupedData DisabledProperty="IsGroup" TextProperty="LedgerName" ValueProperty="LedgerId" Style="width: 100%; max-width: 400px;">
    <Template>
        @(context.Type ?? $"{context.LedgerName}")
    </Template>
</RadzenDropDown>*@

@code {
    int? value;
    IEnumerable<AccountLedgerView> listModel;
    IEnumerable<AccountLedgerView> listModel1;
    IEnumerable<AccountLedgerView> listGroup;
    IEnumerable<AccountLedgerView> listAll;
    IList<AccountLedgerView> groupedData;
    string strGroup;
    protected override async Task OnInitializedAsync()
    {
        strGroup = "All";
        await LoadData();
    }
    private async Task LoadData()
    {
        listModel1 = await _chartofaccount.GetAll();
        listModel = listModel1;
        listAll = await _chartofaccount.GetAllChartofAccount();
        listGroup = listAll;
        //groupedData = listModel.GroupBy(g => g.Type)
        //    .SelectMany(i => new AccountLedgerView[] { new AccountLedgerView() { Type = i.Key } }
        //        .Concat(i.Select(o =>
        //            new AccountLedgerView()
        //                {
        //                    LedgerName = o.LedgerName,
        //                    LedgerId = o.LedgerId
        //                }))).ToList();

        StateHasChanged();
    }
    private async void Filtter()
    {
        if (strGroup == "All")
        {
            listModel = await _chartofaccount.GetAll();
            listGroup = await _chartofaccount.GetAllChartofAccount();

        }
        else
        {
            listModel = await _chartofaccount.GetAll();
            listGroup = await _chartofaccount.GetAllChartofAccount();
            listModel = listModel1.Where(x => x.Type == strGroup).ToList();
            listGroup = listAll.Where(x => x.Type == strGroup).ToList();
            StateHasChanged();
        }
    }
    private async Task Delete(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var result = await _chartofaccount.Delete(id);
            if (result == true)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "The account has been deleted..", Duration = 3000 });
                await LoadData();
                StateHasChanged();
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "This account cannot be deleted as it is associated either with some transactions or documents.", Duration = 3000 });
                StateHasChanged();
            }
        }
    }
    private async Task EditGroup(int id)
    {
        
    }
    private async Task DeleteGroup(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var result = await _chartofaccount.Delete(id);
            if (result == true)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "The chart of account has been deleted..", Duration = 3000 });
                await LoadData();
                StateHasChanged();
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "This chart of account cannot be deleted as it is associated either with some transactions or documents.", Duration = 3000 });
                StateHasChanged();
            }
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
