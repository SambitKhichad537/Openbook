@page "/app/purchasereturn/add"
@using System.Security.Claims;
@inject IPurchaseReturn _purchaseReturn
@inject ICustomerSupplier _customersupplier
@inject IChartofAccount _chartofaccount
@inject IProduct _product
@inject ITax _tax
@inject ICountry _country
@inject ICategories _categories
@inject IUnits _units
@inject IProject _project
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigation
@inject NotificationService NotificationService
<PageTitle>Debit Note | Add | Openbook</PageTitle>
<div class="content container-fluid">
	<div class="page-header">
		<div class="content-page-header">
			<h5>Add Debit Note</h5>
		</div>
	</div>
	<div class="row">
		<div class="col-md-12">
			<div class="card-body">
				<div class="card">
					<div class="form-group-item border-0 mb-0">
						<div class="row align-item-center">
							<div class="col-lg-12 col-md-6 col-sm-12">
								<div class="primary-info">
								<div class="form-group row">
									<label class="col-form-label col-lg-2 required">Supplier Name</label>
									<div class="col-lg-6">
											<div class="wrapper1">
												<div class="select1-btn" @onclick="()=>OpenVendor()">
													<span style="color:#838195;">@strAccount</span>
													<i class="uil uil-angle-down"></i>
												</div>
												@if (isShow == true)
												{
													<div class="content1">
														<div class="search">
															<i class="uil uil-search"></i>
															<input spellcheck="false" @bind="strSearch" type="text" placeholder="Search" @onclick="()=>Search()" @onkeyup="()=>Search()" @bind:event="oninput">
														</div>
														<ul class="options">
															@if (listSupplier == null)
															{
																<h7>NO RESULT FOUND</h7>
															}
															else
															{
																@foreach (var item in listSupplier)
																{

																		
																				<li class="sell" @onclick="()=>SelectAccount(item)">@item.Name</li>
																}
																<hr/>
																<li class="sell" style="margin-top: -12px;">
																	<a style="color: #408dfb; cursor: pointer;" data-bs-toggle="modal" @onclick="()=>ShowSupplier()" data-bs-target="#@showModelSupplier"> <i class="fa fa-plus-circle me-2" aria-hidden="true"></i>New Supplier </a>
																	</li>
															}
														</ul>
													</div>
												}
											</div>
									</div>
								</div>
								</div>
							</div>
							<div style="margin-top:20px;"></div>
							<div class="form-group row">
								<label class="col-lg-2 col-form-label required">Debit Note#</label>
								<div class="col-lg-5">
									<input type="text" disabled="" @bind="master.VoucherNo" class="form-control" >
								</div>
							</div>
							<div class="form-group row">
								<label class="col-form-label col-lg-2 required">Order Number</label> <!---->
								<div class="col-lg-5">
									<span class="form-control-pref text-blue">
									</span>
									<input class="form-control" type="text" @bind="master.OrderNo" />
								</div>
							</div>
							<div class="form-group row">
								<label class="col-form-label col-lg-2 required">Date*</label> <!---->
								<div class="col-lg-5">
									<span class="form-control-pref text-blue">
									</span>
									<input type="date" @bind="@master.Date" class="form-control" />
								</div>
							</div>
							<div class="form-group row">
								<label class="col-form-label col-lg-2 required">Reference</label> <!---->
								<div class="col-lg-5">
									<span class="form-control-pref text-blue">
									</span>
									<input type="text" @bind="@master.Reference" class="form-control" />
								</div>
							</div>
						@*delete*@
					</div>
					<div class="form-group-item">
						<div class="card-table">
								<br />
								<br />
								<div class="row">
									<div class="col-lg-9 col-md-6 col-sm-12">
									</div>
									<div class="col-lg-3 col-md-6 col-sm-12">
										@*<span style="float: left;font-size: 12px;padding: 6px;">Item Rates Are</span>
										<select class="form-select" style="float: left;width: 152px;font-size: 12px;margin-bottom:4px;">
											<option value="TaxExclusive">Tax Exclusive</option>
											<option value="TaxInclusive">Tax Inclusive</option>
										</select>*@
									</div>
								</div>
								<div class="table-responsive">
									
									<table class="table">
										<thead class="thead-light">
											<tr>
												<th>ITEM DETAILS</th>
												<th>ACCOUNT</th>
												<th>QUANTITY</th>
												<th>RATE</th>
												<th>TAX</th>
												<th>AMOUNT</th>
												<th></th>
											</tr>
										</thead>
										<tbody>
											@{
                                int sno = 0;
                            }
                            @foreach (var td in TodoList)
							{
											<tr>
													@{
														sno++;
													}
												<td>
														<span>	@td.ProductName </span>
														<div class="multipleSelection">
														<input type="text" class="form-control" @bind-value="td.Narration" style="width: 280px;" @onkeyup="@(e => editItem(td.Id))" @onclick="@(e => editItem(td.Id))" @bind-value:event="oninput" placeholder="Add a description to your item" />
												</div>
													</td>
												<td>
													<select class="select" @bind-value="td.LedgerId"@onkeyup="@(e => editItem(td.Id))" @onclick="@(e => editItem(td.Id))" @bind-value:event="oninput">
											@if (listModel == null)
											{

											}
											else
											{
												@foreach (var item in listModel)
												{
													<optgroup label="@item.LedgerName">
														@foreach (var items in listAll)
														{
															@if (item.LedgerId == items.GroupUnder)
															{
																<option value="@items.LedgerId">@items.LedgerName</option>

																@foreach (var itemss in listAll)
																{
																	@if (items.LedgerId == itemss.GroupUnder)
																	{
																		<option value="@itemss.LedgerId">&nbsp;&nbsp;&nbsp;&nbsp;@itemss.LedgerName</option>
																		@foreach (var itemsss in listAll)
																		{
																			@if (itemss.LedgerId == itemsss.GroupUnder)
																			{
																				<option value="@itemsss.LedgerId">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@itemsss.LedgerName</option>
																			}
																		}
																	}
																}
															}
														}
													</optgroup>
												}
											}
										</select>
												</td>
													<td>
														<input type="number" class="form-control" @bind-value="td.Qty" style="width: 80px;" @onkeyup="@(e => editItem(td.Id))" @onclick="@(e => editItem(td.Id))" @bind-value:event="oninput" />
													<div class="multipleSelection">
														<span>@td.UnitName</span>
														</div>
													</td>
												<td>
														<input type="number" class="form-control" @bind-value="td.PurchaseRate" style="width: 100px;" @onkeyup="@(e => editItem(td.Id))" @onclick="@(e => editItem(td.Id))" @bind-value:event="oninput" />
													</td>
													<td>
														<select class="select" @bind-value="td.TaxId" @onkeyup="@(e => editItem(td.Id))" @onclick="@(e => editItem(td.Id))" @bind-value:event="oninput">
												<option value="0">Choose tax</option>
												@if(listTax !=null)
															{
																@foreach(var item in listTax)
																{
																	<option value="@item.TaxId">@item.TaxName</option>
																}
															}
															</select>
													</td>
													<td>
														<span style="font-weight:700;">@td.TotalAmount</span>
														<div class="multipleSelection">
															<div class="selectbox" @onclick="()=>Display(td.Id)">
																@if (td.DiscountAmount > 0)
																{
																	<p class="mb-0">
																		@td.DiscountAmount %</p>
																	<span class="down-icon"><i data-feather="chevron-down"></i></span>
																}
																else
																{
																	<p class="mb-0">
																		<i class="fa fa-plus-circle me-2"></i>
																		Discount
																	</p>
																	<span class="down-icon"><i data-feather="chevron-down"></i></span>
																}
															</div>
															<div id="checkboxes" style="display:@(td.strNone ? "block" : "none")">
																	<div class="form-custom">
																	<input type="number" class="form-control bg-grey" @bind-value="td.DiscountAmount" style="width: 80px;float:left;" @onkeyup="@(e => editItem(td.Id))" @onclick="@(e => editItem(td.Id))" @bind-value:event="oninput" /> <span style="float:left;margin-top:6px;">&nbsp;%</span>
																	</div>
															</div>
														</div>
													</td>
												<td class="d-flex align-items-center">
														<a style="cursor:pointer;" @onclick="@(e => deleteItem(td.Id))" class="btn-action-icon"><span><i class="fe fe-trash-2"></i></span></a>
												</td>
											</tr>
											}
											<tr>
												<td colspan="8">
													<div class="wrapper1">
														<div class="select1-btn" @onkeyup="()=>OpenProduct()" @onclick="()=>OpenProduct()">
															<span style="color:#838195;">@strProduct</span>
															<i class="uil uil-angle-down"></i>
														</div>

														@if (isShowProduct == true)
														{

															<div class="content1">
																<div class="search">
																	<i class="uil uil-search"></i>
																	<input spellcheck="false" @bind="strSearchProduct" type="text" placeholder="Search" @onclick="()=>SearchProduct()" @onkeyup="()=>SearchProduct()" @bind:event="oninput">
																</div>
																<ul class="options">
																	@if (listProduct == null)
																	{
																		<h2>NO RESULT FOUND</h2>
																	}
																	else
																	{
																		@foreach (var item in listProduct)
																		{


																			<li class="sell" @onclick="()=>SelectProduct(item)">@item.ProductName</li>
																		}
																		<hr />
																		<li class="sell" style="margin-top: -12px;">
																			<a href="" style="color: #408dfb;" data-bs-toggle="modal" @onclick="()=>Show()" data-bs-target="#@showModel"> <i class="fa fa-plus-circle me-2" aria-hidden="true"></i>New Product </a>
																			</li>
																	}
																</ul>
															</div>
														}
													</div>
												</td>
											</tr>
										</tbody>
									</table>
								</div>
						</div>
					</div>
					<div class="form-group-item border-0 p-0">
						<div class="row">
							<div class="col-xl-6 col-lg-12">
								<div class="form-group-bank">
									<div class="form-group notes-form-group-info">
										<label>Notes</label>
										<textarea class="form-control" placeholder="Enter Notes" @bind="master.Narration"></textarea>
									</div>
								</div>
							</div>
							<div class="col-xl-6 col-lg-12">
								<div class="form-group-bank">
									<div class="row">
										<div class="col-lg-4 col-md-12">
											<div class="form-group">
												<label>Discount Type</label>
												<select class="form-select" @bind="master.DiscountType" @onclick="()=>ChangeDiscount()">
													<option value="%">%</option>
													<option value="amount">Amount</option>
												</select>
											</div>
										</div>
										<div class="col-lg-4 col-md-12">
											<div class="form-group">
												<label>Discount (@strDiscountType)</label>
												@if(strDiscountType == "%")
												{
													<input type="number" class="form-control" @bind="master.DisPer" @onkeyup="CalculateTotal" @bind:event="oninput">
												}
												else
												{
												<input type="number" class="bg-white-smoke form-control" @bind="master.BillDiscount" @onkeyup="CalculateTotal" @bind:event="oninput">
												}
											</div>
										</div>
										<div class="col-lg-4 col-md-12">
											<div class="form-group">
												<label>Total Discount</label> <br />
												<p>@master.BillDiscount</p>
											</div>
										</div>
									</div>
									<div class="invoice-total-box">
										<div class="invoice-total-inner">
											<p>Sub Total <span>@master.NetAmounts</span></p>
											<p>Taxable Total <span>@master.TotalAmount</span></p>
											<p>Vat <span>@master.TotalTax</span></p>
											@*<p>Vat <span>$0.00</span></p>*@
										</div>
										<div class="invoice-total-footer">
											<h4>Grand Total <span>@master.GrandTotal</span></h4>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
					<div class="btn-bottom-toolbar text-right">
						<button class="btn btn-primary" @onclick="()=>Save(strApproved)">
							Save as Approve
						</button>
						<button class="btn btn-rounded btn-light" @onclick="()=>Save(strDraft)">
							Save as Draft
						</button>
						<a href="/app/purchasereturn" class="btn btn-rounded btn-light">
							Cancel
						</a>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>



@*ProductModal*@
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content" style="width: 740px;">
			<div class="modal-header border-0 pb-0">
				<div class="form-header modal-header-title text-start mb-0">
					<h4 class="mb-0">Add Items / Services</h4>
				</div>
				<button type="button" class="close" @onclick="()=>Close()">
					<span class="align-center" aria-hidden="true">&times;</span>
				</button>
			</div>
			<hr />
			<EditForm Model="model" OnValidSubmit="SaveProduct">
				<DataAnnotationsValidator />
				<div class="modal-body">
					<div class="card-body">
						<div class="card">
							<div class="form-group-item">
								<div class="row">
									<div class="col-lg-4 col-md-6 col-sm-12">
										<div class="form-group">
											<label>Item Type</label>
											<RadzenRadioButtonList Value=@value TValue="int">
												<Items>
													<RadzenRadioButtonListItem Text="Goods" Value="1" />
													<RadzenRadioButtonListItem Text="Service" Value="2" />
												</Items>
											</RadzenRadioButtonList>
										</div>
									</div>
									<div class="col-lg-4 col-md-6 col-sm-12">
										<div class="form-group">
											<label>Name</label>
											<input type="text" class="form-control" @bind="model.ProductName" placeholder="Enter Item Name">
											<ValidationMessage For="@(() => model.ProductName)" />
										</div>
									</div>
									<div class="col-lg-4 col-md-6 col-sm-12">
										<div class="form-group">
											<label>Item Category</label> <br />
											<select class="form-select" @bind="model.CategoriesId">
												<option value="0">Choose category</option>
												@if(listCategory !=null)
												{
													@foreach(var item in listCategory)
													{
														<option value="@item.CategoriesId">@item.CategoryName</option>														
													}
												}
											</select>
											<ValidationMessage For="@(() => model.CategoriesId)" />
										</div>
									</div>
									<div class="col-lg-4 col-md-6 col-sm-12">
										<div class="form-group">
											<label>Code</label>
											<input type="text" class="form-control" @bind="model.ProductCode" readonly>
										</div>
									</div>
									<div class="col-lg-4 col-md-6 col-sm-12">
										<div class="form-group">
											<label>Units</label><br />
											<select class="form-select" @bind="model.UnitId">
												<option value="0">Choose unit</option>
												@if(listUnit !=null)
												{
													@foreach(var item in listUnit)
													{
														<option value="@item.UnitId">@item.UnitName</option>														
													}
												}
											</select>
											<ValidationMessage For="@(() => model.UnitId)" />
										</div>
									</div>
									<div class="col-lg-4 col-md-6 col-sm-12">
										<div class="form-group">
											<label>Tax</label> <br />
											<select class="form-select" @bind="model.TaxId">
												<option value="0">Choose tax</option>
												@if(listTax !=null)
												{
													@foreach(var item in listTax)
													{
														<option value="@item.TaxId">@item.TaxName</option>														
													}
												}
											</select>
											<ValidationMessage For="@(() => model.TaxId)" />
										</div>
									</div>
								</div>
							</div>
							<div class="form-group-item">
								<div class="row">
									<div class="col-xl-3 col-lg-4 col-md-6 col-12">
										<div class="form-group">
											<label>Purchase Rate</label>
											<input type="number" class="form-control" @bind="model.PurchaseRate">
											<ValidationMessage For="@(() => model.PurchaseRate)" />
										</div>
									</div>
									<div class="col-xl-3 col-lg-4 col-md-6 col-12">
										<div class="form-group">
											<label>Sales Rate</label>
											<input type="number" class="form-control" @bind="model.SalesRate">
											<ValidationMessage For="@(() => model.SalesRate)" />
										</div>
									</div>
									<div class="col-xl-6 col-lg-4 col-md-6 col-12">
										<div class="form-group">
											<label>Description</label>
											<input type="text" class="form-control" @bind="model.Narration" />
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="submit" class="btn btn-primary">Save</button> &nbsp;
					<a style="cursor:pointer;" @onclick="()=>Close()" class="btn btn-light">Cancel</a>
				</div>
			</EditForm>
		</div>
	</div>
</div>


@*SupplierPopupModel*@

<div class="modal @ModalClassSupplier" tabindex="-1" role="dialog" style="display:@ModalDisplaySupplier">
	<div class="modal-dialog" role="document">
		<div class="modal-content" style="width: 600px;">
			<div class="modal-header border-0 pb-0">
				<div class="form-header modal-header-title text-start mb-0">
					<h4 class="mb-0">Add Supplier</h4>
				</div>
				<button type="button" class="close" @onclick="()=>CloseSupplier()">
					<span class="align-center" aria-hidden="true">&times;</span>
				</button>
			</div>
			<hr />
			<EditForm Model="modelSupplier" OnValidSubmit="SaveSupplier">
				<DataAnnotationsValidator />
				<div class="modal-body">
					<div class="row">
						<div class="col-md-12">
							<div class="card-body">
								<div class="form-group-item border-0 pb-0 mb-0">
									<div class="row">
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>Name <span class="text-danger">*</span></label>
												<input type="text" class="form-control" @bind="modelSupplier.Name" placeholder="Enter supplier name">
												<ValidationMessage For="@(() => modelSupplier.Name)" />
											</div>
										</div>
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>Company Name <span class="text-danger"></span></label>
												<input type="text" class="form-control" @bind="modelSupplier.CompanyName" placeholder="Enter company name">
												<ValidationMessage For="@(() => modelSupplier.CompanyName)" />
											</div>
										</div>
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>Work Phone <span class="text-danger"></span></label>
												<input type="text" class="form-control" @bind="modelSupplier.WorkPhone" placeholder="Enter work phone">
												<ValidationMessage For="@(() => modelSupplier.WorkPhone)" />
											</div>
										</div>
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>Phone <span class="text-danger"></span></label>
												<input type="text" class="form-control" @bind="modelSupplier.Mobile" placeholder="Enter mobile no">
												<ValidationMessage For="@(() => modelSupplier.Mobile)" />
											</div>
										</div>
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>Email <span class="text-danger">*</span></label>
												<input type="text" class="form-control" @bind="modelSupplier.Email" placeholder="Enter email">
												<ValidationMessage For="@(() => modelSupplier.Email)" />
											</div>
										</div>
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>Country <span class="text-danger"></span></label>
												<select @bind="modelSupplier.CountryId" class="form-select">
													<option value="0">Choose</option>
													@if (listCountry != null)
													{
														@foreach (var item in listCountry)
														{
															<option value="@item.CountryId">@item.Name</option>
														}
													}
												</select>
												<ValidationMessage For="@(() => modelSupplier.CountryId)" />
											</div>
										</div>
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>City <span class="text-danger"></span></label>
												<input type="text" class="form-control" @bind="modelSupplier.City" placeholder="Enter city">
												<ValidationMessage For="@(() => modelSupplier.City)" />
											</div>
										</div>
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>Address <span class="text-danger">*</span></label>
												<input type="text" class="form-control" @bind="modelSupplier.Address" placeholder="Enter address">
												<ValidationMessage For="@(() => modelSupplier.Name)" />
											</div>
										</div>
										<div class="col-lg-6 col-sm-12">
											<div class="form-group">
												<label>Same as shipping <span class="text-danger"></span></label>
												<input type="checkbox" @bind="modelSupplier.SameasShipping">
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="submit" class="btn btn-primary" disabled=@IsTaskRunning>Save</button> &nbsp;
					<a style="cursor:pointer;" @onclick="()=>CloseSupplier()" class="btn btn-light">Cancel</a>
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	string strApproved = "Approved";
	string strDraft = "Draft";
	PurchaseReturnMaster master = new PurchaseReturnMaster();
	//ForVendor
	IList<CustomerSupplierView> listSupplier;
	IList<CustomerSupplierView> listSupplierView;
	CustomerSupplierView views;
	//GetAccount
	IList<CustomerSupplierView> listAccount;
	IList<ProjectView> listProject;
	IList<TaxView> listTax;
	bool isShow;
	string strSearch = string.Empty;
	string strAccount;
	//ForProduct
	IList<ProductView> listProduct;
	IList<ProductView> listProductView;
	ProductView viewsProduct;
	bool isShowProduct;
	string strProduct;
	string strSearchProduct;
	string strDiscountType;

	//AddTodoList
	int editedID = 0;
	List<ProductView> TodoList = new List<ProductView>();
	ProductView product = new ProductView();
	//PurchaseAccount
	IEnumerable<AccountLedgerView> listModel1;
	IEnumerable<AccountLedgerView> listAll1;
	IEnumerable<AccountLedgerView> listModel;
	IEnumerable<AccountLedgerView> listAll;


	//ProductModel
	int value = 1;
	public string ModalDisplay = "none;";
	public string ModalClass = "";
	string showModel = "add_category";
	string ShowDialogue;
	Product model = new Product();
	IList<CategoriesView> listCategory;
	IList<UnitView> listUnit;
	IList<TaxView> listTaxProduct;

	//Supplier
	bool IsTaskRunning = false;
	public string ModalDisplaySupplier = "none;";
	public string ModalClassSupplier = "";
	string showModelSupplier = "add_category";
	CustomerSupplier modelSupplier = new CustomerSupplier();
	IList<Country> listCountry;
	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}
	private async Task LoadData()
	{
		//GetSerialNo
		string serial = await _purchaseReturn.GetSerialNo();
		master.VoucherNo = "PI-00" + serial;
		master.SerialNo = serial;
		listSupplierView = await _customersupplier.GetAll("Supplier");
		listSupplier = listSupplierView;
		listProductView = await _product.GetAll();
		listProduct = listProductView;
		listTax = await _tax.GetAll();
		strAccount = "Select Supplier";
		strProduct = "Select an item";
		master.Date = DateTime.UtcNow;
		master.DiscountType = "%";
		//PurchaseAccount
		listModel1 = await _chartofaccount.GetAll();
		listModel = listModel1;
		listAll1 = await _chartofaccount.GetAllChartofAccount();
		listAll = listAll1;
		listModel = listModel1.Where(x => x.Type == "Expenses").ToList();
		listAll = listAll1.Where(x => x.Type == "Expenses").ToList();
		master.OrderNo = string.Empty;
		master.OrderNo = string.Empty;
		master.WarehouseId = 0;
		master.VoucherTypeId = 7;
		master.CustomerSupplierId = 0;
		master.PurchaseMasterId = 0;
		master.Narration = string.Empty;
		master.TotalTax = 0;
		master.DisPer = 0;
		master.BillDiscount = 0;
		master.GrandTotal = 0;
		master.TotalAmount = 0;
		master.NetAmounts = 0;
		master.PayAmount = 0;
		master.BalanceDue = 0;
		master.PreviousDue = 0;
		master.PayAmount = 0;
		master.FinancialYearId = 1;
		ChangeDiscount();
		StateHasChanged();
	}



	private async void Save(string strOpenDraft)
	{
		if (TodoList == null)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Add item atlest 1.", Duration = 3000 });
		}
		else if (master.CustomerSupplierId == 0)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Choose supplier.", Duration = 3000 });
		}
		else if (master.VoucherNo == string.Empty)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Type voucher no.", Duration = 3000 });
		}
		else if (master.GrandTotal == 0)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Invalid entry.", Duration = 3000 });
		}
		else
		{
			var authState = await authenticationState;
			var user = authState.User;
			string userName = user.FindFirst(ClaimTypes.Name).Value;
			master.UserId = userName;
			master.TotalAmount = master.TotalAmount;
			master.NetAmounts = master.NetAmounts;
			master.PreviousDue = master.GrandTotal;
			master.BalanceDue = master.GrandTotal;
			master.AddedDate = DateTime.UtcNow;
			foreach (var item in TodoList)
			{
				PurchaseReturnDetails details = new PurchaseReturnDetails();
				if (item != null)
				{
					details.ProductId = item.ProductId;
					details.Qty = item.Qty;
					details.UnitId = item.UnitId;
					details.Rate = item.PurchaseRate;
					details.Amount = item.Amount;
					details.Discount = item.Discount;
					details.DiscountAmount = item.DiscountAmount;
					if (item.TaxId == 0)
					{
						details.TaxId = 0;
					}
					else
					{
						details.TaxId = item.TaxId;
					}
					details.LedgerId = item.LedgerId;
					details.ProjectId = 0;
					details.TaxRate = item.TaxRate;
					details.TaxAmount = item.TaxAmount;
					details.BatchId = item.BatchId;
					details.NetAmount = item.NetAmount;
					details.Description = item.Narration;
					details.GrossAmount = 0;
					details.PurchaseReturnDetailsId = 0;
					master.listOrder.Add(details);
				}
			}
			if (strOpenDraft == "Approved")
			{
				master.Status = "Approved";
				int result = await _purchaseReturn.Approved(master);

				if (result > 0)
				{
					ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "The debit note has been created..", Duration = 3000 });
					_navigation.NavigateTo($"/app/purchasereturn/view/{result}");
				}
				else
				{
					ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Invalid entry.", Duration = 3000 });
				}
			}
			else if (strOpenDraft == "Draft")
			{
				master.Status = "Draft";
				int result = await _purchaseReturn.Draft(master);

				if (result > 0)
				{
					ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "The debit note has been created..", Duration = 3000 });
					_navigation.NavigateTo($"/app/purchasereturn/view/{result}");
				}
				else
				{
					ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Invalid entry.", Duration = 3000 });
				}
			}
			else
			{

			}
		}
	}
	//ForSupplier
	private async void OpenVendor()
	{
		isShow = !isShow;
		isShowProduct = false;
		product.strNone = false;
	}
	private async void SelectAccount(CustomerSupplierView view)
	{
		strAccount = view.Name;
		master.CustomerSupplierId = view.CustomerSupplierId;
		isShow = !isShow;
		strSearch = string.Empty;
		views = view;
		StateHasChanged();
	}
	private async void Search()
	{
		if (strSearch == string.Empty)
		{
			listSupplier = listSupplierView;
		}
		else
		{
			listSupplier = listSupplierView.Where(x => x.Name.Contains(strSearch)).ToList();
			StateHasChanged();
		}
	}
	//ForProduct
	private async void OpenProduct()
	{
		isShowProduct = !isShowProduct;
		product.strNone = false;
		strSearchProduct = string.Empty;
		listProduct = listProductView;
		StateHasChanged();
	}
	private async void SelectProduct(ProductView viewPro)
	{
		//strProduct = viewPro.ProductName;
		isShowProduct = !isShowProduct;
		strSearchProduct = string.Empty;
		product.ProductName = viewPro.ProductName;
		product.ProductId = viewPro.ProductId;
		product.LedgerId = viewPro.LedgerId;
		product.Barcode = string.Empty;
		product.UnitId = viewPro.UnitId;
		product.UnitName = viewPro.UnitName;
		product.BatchId = 0;
		product.TaxId = viewPro.TaxId;
		product.Qty = 0;
		product.PurchaseRate = viewPro.PurchaseRate;
		product.Discount = 0;
		product.DiscountAmount = 0;
		product.TaxRate = 0;
		product.TaxAmount = 0;
		product.Amount = 0;
		product.NetAmount = 0;
		product.TotalAmount = 0;
		product.Narration = string.Empty;
		product.strNone = false;
		//strProduct = "Select an item";
		AddToList();
		StateHasChanged();
	}
	private async void SearchProduct()
	{
		if (strSearchProduct == string.Empty)
		{
			listProduct = listProductView;
		}
		else
		{
			listProduct = listProductView.Where(x => x.ProductName.Contains(strSearchProduct)).ToList();
			StateHasChanged();
		}
	}
	private async void AddToList()
	{
		//if (product.ProductId == 0)
		//{
		//	//Snackbar.Add("Invalid Product.", Severity.Info);
		//	return;
		//}
		//else if (product.UnitId == 0)
		//{
		//	//Snackbar.Add("Invalid Unit.", Severity.Info);
		//	return;
		//}
		if (editedID == 0)
		{
			var myTodoItem = new ProductView()
				{
					Id = TodoList.Count() + 1,
					PurchaseReturnDetailsId = 0,
					ProductId = product.ProductId,
					LedgerId = product.LedgerId,
					Barcode = product.Barcode,
					UnitId = product.UnitId,
					Qty = product.Qty,
					PurchaseRate = product.PurchaseRate,
					BatchId = product.BatchId,
					Discount = product.Discount,
					DiscountAmount = product.DiscountAmount,
					TaxId = product.TaxId,
					TaxRate = product.TaxRate,
					TaxAmount = product.TaxAmount,
					Amount = product.Amount,
					NetAmount = product.NetAmount,
					TotalAmount = product.TotalAmount,
					ProductName = product.ProductName,
					UnitName = product.UnitName,
					TaxName = product.TaxName,
					BatchNo = "NA",
					ReceiptDetailsId = 0,
					Narration = product.Narration,
					OrderDetailsId = 0,
					strNone = product.strNone

				};
			TodoList.Add(myTodoItem);
			product.ProductId = 0;
			product.LedgerId = 0;
			product.Barcode = string.Empty;
			product.UnitId = 0;
			product.BatchId = 0;
			product.TaxId = 0;
			product.Qty = 0;
			product.PurchaseRate = 0;
			product.Discount = 0;
			product.DiscountAmount = 0;
			product.TaxRate = 0;
			product.TaxAmount = 0;
			product.Amount = 0;
			product.NetAmount = 0;
			product.TotalAmount = 0;
			product.Narration = string.Empty;
			product.strNone = false;
		}
		else
		{
			var myTodos = TodoList.FirstOrDefault(x => x.Id == editedID);
			myTodos.ProductId = product.ProductId;
			myTodos.UnitId = product.UnitId;
			myTodos.BatchId = product.BatchId;
			myTodos.Qty = product.Qty;
			myTodos.LedgerId = product.LedgerId;
			myTodos.Narration = product.Narration;
			myTodos.strNone = product.strNone;
			//Calculate
			decimal decGrossValue = 0;
			decimal decPercentgeDiscount = 0;
			decimal decTtlDiscount = 0;
			decimal decNetValue = 0;
			decimal decTaxAmount = 0;
			decimal decTotalTax = 0;
			decimal decGrndTotl = 0;
			if (Convert.ToDecimal(product.Qty) > 0 && Convert.ToDecimal(product.PurchaseRate) > 0)
			{
				decGrossValue = Convert.ToDecimal(product.PurchaseRate) * Convert.ToDecimal(product.Qty);

				decPercentgeDiscount = Convert.ToDecimal(product.DiscountAmount) * 100 / decGrossValue;
				decTtlDiscount = decPercentgeDiscount;
				myTodos.Discount = decPercentgeDiscount;

				decNetValue = decGrossValue - Convert.ToDecimal(product.DiscountAmount);
				myTodos.DiscountAmount = product.DiscountAmount;
				//ClculteT
				myTodos.PurchaseRate = product.PurchaseRate;
				if (product.TaxId > 0)
				{
					var viewTaxRate = await _tax.ViewTaxRate(product.TaxId);
					myTodos.TaxId = product.TaxId;
					myTodos.TaxRate = viewTaxRate.Rate;
					decTaxAmount = decNetValue * viewTaxRate.Rate / 100;
					myTodos.TaxAmount = Math.Round(decTaxAmount, 2);
				}
				else
				{
					myTodos.TaxId = 0;
					myTodos.TaxRate = 0;
					decTaxAmount = 0;
					myTodos.TaxAmount = Math.Round(decTaxAmount, 2);					
				}
				decGrndTotl = decNetValue;

				myTodos.Amount = Math.Round(decGrossValue, 2);
				myTodos.NetAmount = Math.Round(decGrossValue, 2);
				myTodos.VatAmount = Math.Round(decTaxAmount, 2);
				myTodos.TotalAmount = Math.Round(decGrndTotl, 2);
			}
			else
			{
				myTodos.Discount = 0;
			}

			product.ProductId = 0;
			product.LedgerId = 0;
			product.Barcode = string.Empty;
			product.UnitId = 0;
			product.BatchId = 0;
			product.TaxId = 0;
			product.Qty = 0;
			product.PurchaseRate = 0;
			product.Discount = 0;
			product.DiscountAmount = 0;
			product.TaxRate = 0;
			product.TaxAmount = 0;
			product.Amount = 0;
			product.NetAmount = 0;
			product.TotalAmount = 0;
			product.Narration = string.Empty;
			product.strNone = false;
			editedID = 0;
		}
		CalculateTotal();
		StateHasChanged();
	}
	void editItem(int id)
	{
		var myTodo = TodoList.FirstOrDefault(x => x.Id == id);
		product.ProductId = myTodo.ProductId;
		product.LedgerId = myTodo.LedgerId;
		product.Barcode = myTodo.Barcode;
		product.ProductName = myTodo.ProductName;
		product.UnitId = myTodo.UnitId;
		product.UnitName = myTodo.UnitName;
		product.BatchId = myTodo.BatchId;
		product.BatchNo = myTodo.BatchNo;
		product.TaxId = myTodo.TaxId;
		product.TaxName = myTodo.TaxName;
		product.Qty = myTodo.Qty;
		product.PurchaseRate = myTodo.PurchaseRate;
		product.Discount = myTodo.Discount;
		product.DiscountAmount = myTodo.DiscountAmount;
		product.NetAmount = myTodo.NetAmount;
		product.Amount = myTodo.Amount;
		product.TaxRate = myTodo.TaxRate;
		product.TaxAmount = myTodo.TaxAmount;
		product.TotalAmount = myTodo.TotalAmount;
		product.Narration = myTodo.Narration;
		product.strNone = myTodo.strNone;
		editedID = id;
		AddToList();
	}
	private async Task deleteItem(int id)
	{
		var myTodo = TodoList.FirstOrDefault(x => x.Id == id);
		TodoList.Remove(myTodo);

		product.ProductId = 0;
		product.LedgerId = 0;
		product.Barcode = string.Empty;
		product.UnitId = 0;
		product.BatchId = 0;
		product.TaxId = 0;
		product.Qty = 0;
		product.PurchaseRate = 0;
		product.Discount = 0;
		product.DiscountAmount = 0;
		product.TaxRate = 0;
		product.TaxAmount = 0;
		product.NetAmount = 0;
		product.TotalAmount = 0;
		product.PurchaseAccount = 0;
		product.Narration = string.Empty;
		editedID = 0;
		CalculateTotal();
		StateHasChanged();
	}
	void CalculateTotal()
	{
		decimal decTotalAmount = 0;
		decimal decAdditionalCost = 0;
		decimal decTaxAmount = 0;
		decimal decTotalDisTax = 0;
		decimal decGrandTotalCshbnk = 0;
		decimal decNetAmount = 0;
		decimal decCheckTax = 0;
		decimal decGrandTotal = 0;
		decimal decVat = 0;
		foreach (var todo in TodoList)
		{
			decTotalAmount = decTotalAmount + todo.TotalAmount;
			decNetAmount = decNetAmount + todo.NetAmount;
			decCheckTax = decCheckTax + todo.TaxAmount;
			decVat = decVat + todo.VatAmount;
		}
		master.NetAmounts = Math.Round(decNetAmount, 2);

		decimal decTotalAmountTax = 0;
		decTotalAmountTax = decTotalAmount;
		decTotalDisTax = decTotalAmount;
		if (master.DiscountType == "%")
		{
			if (master.DisPer > 0)
			{
				master.BillDiscount = Math.Round((decTotalAmountTax * master.DisPer / 100), 2);
			}
			else
			{
				master.BillDiscount = 0;
			}
		}
		else
		{
			if (master.BillDiscount > 0)
			{
				master.DisPer = Math.Round((master.BillDiscount * 100) / (decTotalAmountTax) , 2);
			}
			else
			{
				master.DisPer = 0;
			}
		}
		master.TotalAmount = Math.Round(master.NetAmounts - master.BillDiscount, 2);
		master.TotalTax = Math.Round(decCheckTax, 2);
		decimal decDiscountAmount = 0;
		decDiscountAmount = master.BillDiscount;
		decGrandTotal = Math.Round((decTotalDisTax + decAdditionalCost + decCheckTax) - (decDiscountAmount), 2);

		if (decGrandTotal >= 0)
		{
			master.GrandTotal = decGrandTotal;
		}
		else
		{
			master.BillDiscount = 0;
			master.GrandTotal = decGrandTotal;
		}
		decGrandTotalCshbnk = master.PayAmount;
		if (master.GrandTotal >= decGrandTotalCshbnk)
		{
			var decTotl = master.GrandTotal - decGrandTotalCshbnk;
			master.PreviousDue = Math.Round(decTotl, 2);
		}
		else
		{
			master.PayAmount = 0;
			master.PreviousDue = 0;
		}
	}
	private async void ChangeDiscount()
	{
		if(master.DiscountType == "%")
		{
			strDiscountType = "%";
		}
		else
		{
			strDiscountType = "Amount";
		}
	}
	private async void Display(int id)
	{
		isShowProduct = false;
		isShow = false;
		var myTodo = TodoList.FirstOrDefault(x => x.Id == id);
		product.ProductId = myTodo.ProductId;
		product.LedgerId = myTodo.LedgerId;
		product.Barcode = myTodo.Barcode;
		product.ProductName = myTodo.ProductName;
		product.UnitId = myTodo.UnitId;
		product.UnitName = myTodo.UnitName;
		product.BatchId = myTodo.BatchId;
		product.BatchNo = myTodo.BatchNo;
		product.TaxId = product.TaxId;
		product.TaxName = myTodo.TaxName;
		product.Qty = myTodo.Qty;
		product.PurchaseRate = myTodo.PurchaseRate;
		product.Discount = myTodo.Discount;
		product.DiscountAmount = myTodo.DiscountAmount;
		product.NetAmount = myTodo.NetAmount;
		product.Amount = myTodo.Amount;
		product.TaxRate = myTodo.TaxRate;
		product.TaxAmount = myTodo.TaxAmount;
		product.TotalAmount = myTodo.TotalAmount;
		product.Narration = myTodo.Narration;
		product.strNone = !myTodo.strNone;
		editedID = id;
		AddToList();
	}



	//PopUpProduct/Save
	private async Task Show()
	{
		model.ProductId = 0;
		ModalDisplay = "block;";
		ModalClass = "Show";
		listCategory = await _categories.GetAll();
		listUnit = await _units.GetAll();
		listTax = await _tax.GetAll();
		var strProductCode = _product.GetProductNo();
		model.ProductCode = "PRO00" + strProductCode;
		model.Snno = strProductCode;
		model.CategoriesId = 0;
		model.SalesAccount = 53;
		model.PurchaseAccount = 33;
		model.BrandId = 0;
		model.UnitId = 0;
		model.TaxId = 0;
		model.PurchaseRate = 0;
		model.SalesRate = 0;
		model.Narration = string.Empty;
		model.IsActive = true;
		model.Barcode = string.Empty;
		model.Image = string.Empty;
		model.OpeningStock = 0;
		model.ExiparyDate = DateTime.UtcNow;
		StateHasChanged();
	}
	private async Task SaveProduct()
	{
		var isCheck = await _product.CheckName(model.ProductName);
		if (isCheck == true)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "Category name already exists.", Duration = 3000 });
		}
		else
		{
			if (value == 1)
			{
				model.ItemType = "Goods";
			}
			else
			{
				model.ItemType = "Service";
			}
			model.AddedDate = DateTime.UtcNow;
			var result = await _product.Save(model);

			if (result > 0)
			{
				listProductView = await _product.GetAll();
				listProduct = listProductView;
				strProduct = "Select an item";
				ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "The category has been added.", Duration = 3000 });
				ModalDisplay = "none";
				ModalClass = "";
				StateHasChanged();
			}
			else
			{
				ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Invalid.", Duration = 3000 });
				_navigation.NavigateTo("/", true);
				StateHasChanged();
			}
		}
	}
	private async Task Close()
	{
		ModalDisplay = "none";
		ModalClass = "";
		StateHasChanged();
	}



	//PopUpProduct/Save
	private async Task ShowSupplier()
	{
		modelSupplier.CustomerSupplierId = 0;
		ModalDisplaySupplier = "block;";
		ModalClassSupplier = "Show";
        listCountry = await _country.GetAll();
		modelSupplier.Name = string.Empty;
		modelSupplier.Type = "Supplier";
		modelSupplier.CompanyName = string.Empty;
		modelSupplier.WorkPhone = string.Empty;
		modelSupplier.Mobile = string.Empty;
		modelSupplier.Website = string.Empty;
		modelSupplier.CountryId = 0;
		modelSupplier.City = string.Empty;
		modelSupplier.Address = string.Empty;
		modelSupplier.CreditLimit = 0;
		modelSupplier.OpeningBalance = 0;
		modelSupplier.DrCr = "Dr";
		modelSupplier.Date = DateTime.UtcNow;
		modelSupplier.SameasShipping = true;
		IsTaskRunning = false;
		StateHasChanged();
	}
	private async Task SaveSupplier()
	{
		IsTaskRunning = true;
			var isCheck = await _customersupplier.CheckName(modelSupplier.Name, modelSupplier.Type);
			if (isCheck == true)
			{
				IsTaskRunning = false;
				ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "Supplier name already exists.", Duration = 3000 });
			}
			else
			{
				model.AddedDate = DateTime.UtcNow;
				var result = await _customersupplier.Save(modelSupplier);

				if (result > 0)
				{
					ModalDisplaySupplier = "none";
					ModalClassSupplier = "";
				listSupplierView = await _customersupplier.GetAll("Supplier");
				listSupplier = listSupplierView;
					ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "The supplier has been added.", Duration = 3000 });
					await LoadData();
					StateHasChanged();
				}
				else
				{
					IsTaskRunning = false;
					ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Invalid.", Duration = 3000 });
					_navigation.NavigateTo("/", true);
					StateHasChanged();
				}
			}
	}
	private async Task CloseSupplier()
	{
		ModalDisplaySupplier = "none";
		ModalClassSupplier = "";
		StateHasChanged();
	}
	void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
	async Task OnFileChange(InputFileChangeEventArgs e)
	{
		var format = "image/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		if (imageData == null)
		{
			model.Image = string.Empty;
		}
		else
		{
			model.Image = imageData;
		}
	}
}
